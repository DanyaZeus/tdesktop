name: Windows.

on:
  push:
    paths-ignore:
      - 'docs/**'
      - '**.md'
      - 'changelog.txt'
      - 'LEGAL'
      - 'LICENSE'
      - '.github/**'
      - '!.github/workflows/win.yml'
      - 'lib/xdg/**'
      - 'snap/**'
      - 'Telegram/build/docker/**'
      - 'Telegram/Resources/uwp/**'
      - 'Telegram/SourceFiles/platform/linux/**'
      - 'Telegram/SourceFiles/platform/mac/**'
      - 'Telegram/Telegram/**'
      - 'Telegram/configure.sh'
      - 'Telegram/Telegram.plist'
    branches-ignore:
      - 'compare/**'
  pull_request:
    branches-ignore:
      - 'compare/**'
  workflow_dispatch:
    inputs:
      buildCommit:
        description: 'Commit for building. Default it latest on branch'
        required: false
        type: string
        default: ''

jobs:

  windows:
    name: Windows
    runs-on: self-hosted

    strategy:
      matrix:
        arch: [Win32, x64]
#        generator: ["", "Ninja Multi-Config"]
        generator: [""]

    env:
      UPLOAD_ARTIFACT: "true"
      ONLY_CACHE: "false"
      PREPARE_PATH: "Telegram/build/prepare/prepare.py"
      PreferredToolArchitecture: "x64"
      ARTIFACT_NAME: "PTelegram_Win"

    defaults:
      run:
        shell: cmd

    steps:
      - name: Prepare directories.
        run: |
          echo TBUILD=%GITHUB_WORKSPACE%\TBuild>>%GITHUB_ENV%
          echo REPO_NAME=tdesktop>>%GITHUB_ENV%

      - name: Clone.
        uses: actions/checkout@v3.1.0
        if: github.event.inputs.buildCommit == ''
        with:
          submodules: recursive
          path: ${{ env.TBUILD }}\${{ env.REPO_NAME }}

      - uses: ilammy/msvc-dev-cmd@v1.12.0
        name: Native Tools Command Prompt.
        with:
          arch: ${{ matrix.arch }}

      - name: Clone with checkout.
        uses: actions/checkout@v3.1.0
        if: github.event.inputs.buildCommit != ''
        with:
          submodules: recursive
          path: ${{ env.TBUILD }}\${{ env.REPO_NAME }}
          ref: ${{ github.event.inputs.buildCommit }}

      - name: Setup NASM.
        uses: ilammy/setup-nasm@v1

      - name: Libraries.
        env:
          GYP_MSVS_OVERRIDE_PATH: 'C:\Program Files\Microsoft Visual Studio\2022\Community\'
          GYP_MSVS_VERSION: 2022
        run: |
          cd %TBUILD%
          %REPO_NAME%\Telegram\build\prepare\win.bat silent

      - name: Read configuration matrix.
        shell: bash
        run: |
          ARTIFACT_NAME="Telegram"

          ARCH=""
          if [ -n "${{ matrix.arch }}" ]; then
            case "${{ matrix.arch }}" in
              Win32) ARCH="x86";;
              *) ARCH="${{ matrix.arch }}";;
            esac
            echo "Architecture from matrix: $ARCH"
            ARTIFACT_NAME="${ARTIFACT_NAME}_${{ matrix.arch }}"
          fi

          GENERATOR=""
          if [ -n "${{ matrix.generator }}" ]; then
            GENERATOR="-G \"${{ matrix.generator }}\""
            echo "Generator from matrix: $GENERATOR"
            ARTIFACT_NAME="${ARTIFACT_NAME}_${{ matrix.generator }}"
          fi
          echo "TDESKTOP_BUILD_GENERATOR=$GENERATOR" >> $GITHUB_ENV

          [ -n "$GENERATOR" ] && ARCH=""
          echo "TDESKTOP_BUILD_ARCH=$ARCH" >> $GITHUB_ENV

          DEFINE=""
          if [ -n "${{ matrix.defines }}" ]; then
            DEFINE="-D ${{ matrix.defines }}=ON"
            echo "Define from matrix: $DEFINE"
            ARTIFACT_NAME="${ARTIFACT_NAME}_${{ matrix.defines }}"
          fi
          echo "TDESKTOP_BUILD_DEFINE=$DEFINE" >> $GITHUB_ENV

          echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV

          API="-D TDESKTOP_API_TEST=ON"
          if [ $GITHUB_REF == 'refs/heads/nightly' ]; then
            echo "Use the open credentials."
            API="-D TDESKTOP_API_ID=611335 -D TDESKTOP_API_HASH=d524b414d21f4d37f08684c1df41ac9c"
          fi
          echo "TDESKTOP_BUILD_API=$API" >> $GITHUB_ENV

      - name: Free up some disk space.
        run: |
          cd %TBUILD%
          del /S Libraries\*.pdb
          del /S Libraries\*.pch
          del /S Libraries\*.obj

      - name: Telegram Desktop build.
        if: env.ONLY_CACHE == 'false'
        run: |
          cd %TBUILD%\%REPO_NAME%\Telegram
          SET CXXFLAGS="-bigobj"
          call configure.bat ^
          %TDESKTOP_BUILD_ARCH% ^
          %TDESKTOP_BUILD_API% ^
          -D TDESKTOP_API_TEST=OFF ^
          -D TDESKTOP_API_ID=${{ secrets.API_ID }} ^
          -D TDESKTOP_API_HASH=${{ secrets.API_HASH }} ^
          -D DESKTOP_APP_DISABLE_CRASH_REPORTS=OFF ^
          -D DESKTOP_APP_NO_PDB=ON ^
          %TDESKTOP_BUILD_DEFINE%
          
          cmake --build ..\out --config Release --parallel

      - name: Move and hash artifact.
        if: env.UPLOAD_ARTIFACT == 'true'
        run: |
          mkdir artifact
          move %TBUILD%\tdesktop\out\Release\Telegram.exe artifact/Telegram_${{ matrix.arch }}.exe
          certutil -hashfile artifact/Telegram_${{ matrix.arch }}.exe SHA256 | find /i /v "SHA256" | find /i /v "CertUtil" > artifact/Telegram_${{ matrix.arch }}_sha256.txt

      - uses: actions/upload-artifact@master
        name: Upload artifact.
        if: env.UPLOAD_ARTIFACT == 'true'
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: artifact\
